<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ assembly name="$(ProjectDir)TiraggoEdmx\TiraggoEdmx.EF.dll" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="TiraggoEdmx_v3" #>
<#
    string path = System.IO.Path.GetDirectoryName(Host.TemplateFile);

	// ******************************************
	// *** CHANGE THIS TO YOUR EDMX FILE NAME ***
	// ******************************************
	string edxmFileName = @"..\..\{PATH}\DomainModel.edmx";

    string inputFile = edxmFileName;
    string inputPath = path + "\\" + edxmFileName;

    Edmx edmx = null;

    try
    {
        edmx = Edmx.Load(inputPath);
    }
    catch(Exception ex)
    {
        return "// Either the " + edxmFileName + " was not found or it's not a V3 EDMX File. You must change this in the T4 Template file.";
    }

    MetadataLoader loader = new MetadataLoader(this);
    var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
    var code = new CodeGenerationTools(this);
    EdmItemCollection itemCollection = loader.CreateEdmItemCollection(inputFile);

    // for each entity
    foreach (EntityType entity in itemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
    {
        TiraggoEntityInfo info = new TiraggoEntityInfo(edmx, entity.FullName);

        fileManager.StartNewFile(entity.Name + "Map.Generated.cs");
#>
//**********************************************************************************
// This file is generated by a T4 template.  Any modifications to this file will
// be overridden the next time this file is generated.  DO NOT MODIFY THIS FILE!!!
//**********************************************************************************
using FluentNHibernate.Mapping;
using System;

<#
        ClearIndent();
        BeginNamespace(code);

#>
    <#="// Physical Table [" + info.StorageInfo.Schema + "." + info.StorageInfo.Name + "]"#>
    <#="public partial class " + info.ConceptualModel.Name + "Map : ClassMap<" + info.ConceptualModel.Name + ">"#>
    <#="{"#>
		<#="public " + info.ConceptualModel.Name + "Map()" #>
	    <#="{"#>
			<#="Schema(\"" + (string.IsNullOrEmpty(info.StorageInfo.Schema) ? "dbo" : info.StorageInfo.Schema) + "\");"#>
			<#="Table(\"" + info.StorageInfo.Name + "\");"#>
<#
		if(info.ConceptualModel.Key.Count() > 1)
		{#>
			<#="CompositeId()"#>
<#
			foreach (tgPropertyRef key in info.ConceptualModel.Key)
			{#>
				<#=".KeyProperty(x => x." + key.Name +", \"" + info.ColumnMappings[key.Name] + "\")"#>
<#			}#>
				<#=";"#>
<#		}
		else
		{
			foreach (tgPropertyRef key in info.ConceptualModel.Key)
			{#>
			<#="Id(x => x." + key.Name + ").Column(\"`" + info.ColumnMappings[key.Name] + "`\");"#>
<#			}
		}


        foreach (tgProperty prop in info.ConceptualModel.Properties)
        {
            string physicalColumName = info.ColumnMappings[prop.Name];
            tgProperty sqlInfo = info.ColumnSQL[physicalColumName];
            if (info.IsInPrimaryKey(prop.Name)==false)
			{
#>
			<#="Map(x => x." + prop.Name + ").Column(\"`" + sqlInfo.Name + "`\");"#>
<#			}
        }
#>
	    <#="}"#>
    <#="}"#>
<#

        EndNamespace(code);
    }
    fileManager.Process();
#>
<#+
public void BeginNamespace(CodeGenerationTools code)
{
    var codeNamespace = code.VsNamespaceSuggestion();
    if (!String.IsNullOrEmpty(codeNamespace))
    {
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#+
    }
}

public void EndNamespace(CodeGenerationTools code)
{
    if (!String.IsNullOrEmpty(code.VsNamespaceSuggestion()))
    {
#>
}
<#+
    }
}
#>